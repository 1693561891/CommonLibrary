apply plugin: 'com.android.application'

android {
    compileSdkVersion build_versions.target_sdk

    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation 'com.tencent.shadow.dynamic:dynamic-manager'
    implementation 'com.tencent.shadow.core:manager'
    implementation 'com.tencent.shadow.dynamic:dynamic-loader'
    implementation project(':sample-constant')

    compileOnly 'com.tencent.shadow.core:common-debug'
    compileOnly 'com.tencent.shadow.dynamic:dynamic-host-debug'
}

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
//            def task = project.getTasksByName("check${buildTypeName.capitalize()}Classpath", false).first() as Task
            def task = project.getTasksByName("pre${buildTypeName.capitalize()}Build", false).first() as Task
            task.dependsOn gradle.includedBuild('core').task(':common:jarDebugPackage')
            task.dependsOn gradle.includedBuild('dynamic').task(':dynamic-host:jarDebugPackage')
        }
    }
}