apply from: rootProject.file('cc-settings.gradle')
//apply from: 'https://raw.githubusercontent.com/luckybilly/CC/master/cc-settings.gradle'
//先加载local.properties文件
Properties localProperties = new Properties()
try {
    def localFile = project.rootProject.file('local.properties')
    if (localFile != null && localFile.exists()) {
        localProperties.load(localFile.newDataInputStream())
    }
} catch (Exception ignored) {
    println("local.properties not found")
}

//gradle配置属性
Properties props = new Properties()
props.load(new FileInputStream(file("../gradle.properties")))

//读取build.gradle中的设置
// 2018-04-06修改：
//  为了更利于理解，将ext.runAsApp 改名为 ext.mainApp
//  ext.mainApp的将仅代表是否作为主app，为true时以application方式编译，为false或未配置时以local.properties中的配置为准
//  兼容以前的runAsApp设置，ext.runAsApp的功能保持不变，runAsApp优先级高于local.properties
def runAsApp = ext.has('runAsApp')
if (runAsApp) {
    runAsApp = ext.runAsApp
} else if(ext.has('mainApp') && ext.mainApp) { //ext.mainApp为true时，代表以app方式运行
    runAsApp = true
} else {
    //build.gradle中没有配置runAsApp，且ext.mainApp=false或未配置
    //再从local.properties中读取配置，例如： demo_component_a=true
    //注：如果采用local.properties读取配置，每次修改需要重新同步(Sync Project)一下
    runAsApp = 'true' == localProperties.getProperty(project.name)
    //设置到ext中，供module的build.gradle使用（例如用于设置sourceSets配置）
    ext.runAsApp = runAsApp
}

//模块名称
def componentName = project.name.replaceAll("component_", "")

android {
    compileSdkVersion props["ANDROID_BUILD_SDK_VERSION"] as int
    defaultConfig {
        minSdkVersion props["ANDROID_BUILD_MIN_SDK_VERSION"] as int
        targetSdkVersion props["ANDROID_BUILD_TARGET_SDK_VERSION"] as int
        versionCode props["VERSION_CODE"] as int
        versionName props["VERSION_NAME"]
        if (runAsApp) {
            applicationId props["ANDROID_APPLICATIONID"] + componentName
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resourcePrefix componentName + "_"
        resValue "string", componentName + "_module_name", project.name
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }
}


dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api 'com.android.support.constraint:constraint-layout:1.1.0'
    api "com.android.support:appcompat-v7:${props["ANDROID_SUPPORT_LIB_VERSION"]}"
    api "com.android.support:cardview-v7:${props["ANDROID_SUPPORT_LIB_VERSION"]}"
    api "com.android.support:design:${props["ANDROID_SUPPORT_LIB_VERSION"]}"

    api "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    //view注解
    implementation 'com.jakewharton:butterknife:8.4.0'
    kapt 'com.jakewharton:butterknife-compiler:8.4.0'

    //retrofit和rxjava
    api 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.3.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    api 'io.reactivex.rxjava2:rxjava:2.1.0'
    api 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
    api 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    //分包
    implementation 'com.android.support:multidex:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}