//apply from: rootProject.file('cc-settings-2.gradle')
//apply from: 'https://raw.githubusercontent.com/luckybilly/CC/master/cc-settings.gradle'
//先加载local.properties文件
Properties localProperties = new Properties()
try {
    def localFile = project.rootProject.file('local.properties')
    if (localFile != null && localFile.exists()) {
        localProperties.load(localFile.newDataInputStream())
    }
} catch (Exception ignored) {
    println("local.properties not found")
}
def runAsApp = ext.has('runAsApp')
runAsApp = ('true' == localProperties.getProperty(project.name))
apply plugin: 'com.android.application'
if (runAsApp == false) {
    apply plugin: 'com.wlqq.phantom.plugin'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//模块名称
def componentName = project.name.replaceAll("plugin-", "")
println(project.name + "--" + runAsApp)
android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
//        minSdkVersion build_versions.min_sdk
//        targetSdkVersion build_versions.target_sdk
//        versionCode build_versions.versionCode
//        versionName build_versions.versionName
//        if (project.ext.runAsApp) {
//            applicationId deps.buildApplicationId + componentName
//        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resourcePrefix componentName + "_"
        resValue "string", componentName + "_module_name", project.name
        signingConfigs {
            config {
                keyAlias localProperties['keyAlias']
                keyPassword localProperties['keyPassword']
                storeFile file(localProperties['storeFile'])
                storePassword localProperties['storePassword']
//            v2SigningEnabled false
            }
        }
        vectorDrawables.useSupportLibrary = true
    }


    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            //默认的作为application运行时Manifest文件路径
            def debugManifest = 'src/main/debug/AndroidManifest.xml'
            if (runAsApp && project.file(debugManifest).exists()) {
                manifest.srcFile debugManifest
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下自动排除debug文件夹中的所有Java文件
                // 可以将debug代码放在这个包内，例如：Application子类
                java {
                    exclude 'debug/**'
                }
            }
            // 注：2018-03-12推荐：将组件单独以app运行时的测试代码及资源放到src/main/debug/目录下
            if (runAsApp) {
                //debug模式下，如果存在src/main/debug/assets，则自动将其添加到assets源码目录
                if (project.file('src/main/debug/assets').exists()) {
                    assets.srcDirs = ['src/main/assets', 'src/main/debug/assets']
                }
                //debug模式下，如果存在src/main/debug/java，则自动将其添加到java源码目录
                if (project.file('src/main/debug/java').exists()) {
                    java.srcDirs = ['src/main/java', 'src/main/debug/java']
                }
                //debug模式下，如果存在src/main/debug/res，则自动将其添加到资源目录
                if (project.file('src/main/debug/res').exists()) {
                    res.srcDirs = ['src/main/res', 'src/main/debug/res']
                }
            }
        }
    }
}

def deletePluginInHost() {
    println "deletePluginInHost..."
    def assetsDir = file(project(':host').getProjectDir().absolutePath + '/src/main/assets/plugins')
    if (!assetsDir.exists()) {
        assetsDir.mkdirs()
    }
    assetsDir.eachFile { file ->
        println "list assets file: " + file.name
        if (file.name.startsWith(android.defaultConfig.applicationId)) {
            def ret = file.delete()
            println "delete assets file: ${file.name}, result: ${ret}"
        }
    }
}

def copyPluginToHost(String dir) {
    println "copy build plugin to app assets..."
    copy {
        from(buildDir.absolutePath + '/outputs/apk/' + dir) {
            include('*.apk')
        }

        into(project(':host').getProjectDir().absolutePath + '/src/main/assets/plugins/')
    }
}

dependencies {
//    compileOnly deps.phantomVersion.communicationLib
//    compileOnly deps.phantomVersion.pluginLib
    debugImplementation deps.phantomVersion.communicationLib
    debugImplementation deps.phantomVersion.pluginLib

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.support.v4
    implementation deps.support.app_compat
    implementation deps.support.design
    implementation deps.support.cardview
    implementation deps.preference.preference
    implementation deps.constraint_layout
//    //Paging的依赖
//    implementation deps.paging
    implementation deps.kotlin.stdlib
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
//    implementation deps.alibaba.fastjson
    implementation deps.retrofit.rxjava2
    implementation deps.okhttp_logging_interceptor
    implementation deps.rx_android
    implementation deps.rxjava2
    implementation deps.rxbinding
    implementation deps.klinkerapps
//    implementation deps.rxbinding_core
//    implementation deps.rxbinding_appcompat
//    implementation deps.rxbinding_drawerlayout
//    implementation deps.rxbinding_leanback
//    implementation deps.rxbinding_recyclerview
//    implementation deps.rxbinding_slidingpanelayout
//    implementation deps.rxbinding_swiperefreshlayout
//    implementation deps.rxbinding_viewpager
//    implementation deps.rxbinding_material

    testImplementation deps.junit
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.espresso.core
}
if (runAsApp == false) {

    afterEvaluate { project ->
        project.tasks.assembleDebug.doLast {
            deletePluginInHost()
            copyPluginToHost('debug')
        }

        project.tasks.assembleRelease.doLast {
            deletePluginInHost()
            copyPluginToHost('release')
        }
    }

    phantomPluginConfig {
        /*------------------------------ 剔除 support-v4 及其依赖的库 BEGIN ----------------------------*/
//    excludeLib "com.android.support:support-v4:${androidVersion.supportLib}"
//    excludeLib "com.android.support:support-core-ui:${androidVersion.supportLib}"
//    excludeLib "com.android.support:support-compat:${androidVersion.supportLib}"
//    excludeLib "com.android.support:support-media-compat:${androidVersion.supportLib}"
//    excludeLib "com.android.support:support-core-utils:${androidVersion.supportLib}"
//    excludeLib "com.android.support:support-fragment:${androidVersion.supportLib}"
//    excludeLib "com.android.support:support-annotations:${androidVersion.supportLib}"
//    excludeLib "com.android.support:cursoradapter:${androidVersion.supportLib}"
//    excludeLib "com.android.support:interpolator:${androidVersion.supportLib}"
//    excludeLib "com.android.support:versionedparcelable:${androidVersion.supportLib}"
//    excludeLib "com.android.support:documentfile:${androidVersion.supportLib}"
//    excludeLib "com.android.support:customview:${androidVersion.supportLib}"
//    excludeLib "com.android.support:slidingpanelayout:${androidVersion.supportLib}"
//    excludeLib "com.android.support:swiperefreshlayout:${androidVersion.supportLib}"
//    excludeLib "com.android.support:drawerlayout:${androidVersion.supportLib}"
//    excludeLib "com.android.support:coordinatorlayout:${androidVersion.supportLib}"
//    excludeLib "com.android.support:loader:${androidVersion.supportLib}"
//    excludeLib "com.android.support:viewpager:${androidVersion.supportLib}"
//    excludeLib "com.android.support:collections:${androidVersion.supportLib}"
//    excludeLib "com.android.support:asynclayoutinflater:${androidVersion.supportLib}"
//    excludeLib "com.android.support:print:${androidVersion.supportLib}"
//    excludeLib "com.android.support:localbroadcastmanager:${androidVersion.supportLib}"
//
//    excludeLib "android.arch.lifecycle:viewmodel:${androidVersion.archLib}"
//    excludeLib "android.arch.lifecycle:runtime:${androidVersion.archLib}"
//    excludeLib "android.arch.lifecycle:common:${androidVersion.archLib}"
//    excludeLib "android.arch.lifecycle:livedata:${androidVersion.archLib}"
//    excludeLib "android.arch.lifecycle:livedata-core:${androidVersion.archLib}"
//    excludeLib "android.arch.core:common:${androidVersion.archLib}"
        /*------------------------------ 删除 support-v4 及其依赖的库  END  ----------------------------*/

        /*------------------------------ 混淆配置 BEGIN ------------------------------*/
        libraryJarsProguardFile file('proguard-phantom.pro')
        /*------------------------------ 混淆配置  END  ------------------------------*/

        /*------------------------------ 快速安装插件配置 BEGIN ------------------------*/
        // 宿主包名
        hostApplicationId = "com.wlqq.phantom.sample"
        // 宿主 launcher Activity full class name
        hostAppLauncherActivity = "com.wlqq.phantom.sample.MainActivity"

        // 插件包名
        pluginApplicationId = android.defaultConfig.applicationId
        // 插件版本名
        pluginVersionName = android.defaultConfig.versionName
        /*------------------------------ 快速安装插件配置  END  -------------------------*/
    }
}
