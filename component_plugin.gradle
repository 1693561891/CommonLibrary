//apply from: rootProject.file('cc-settings-2.gradle')
//apply from: 'https://raw.githubusercontent.com/luckybilly/CC/master/cc-settings.gradle'
//先加载local.properties文件
Properties localProperties = new Properties()
try {
    def localFile = project.rootProject.file('local.properties')
    if (localFile != null && localFile.exists()) {
        localProperties.load(localFile.newDataInputStream())
    }
} catch (Exception ignored) {
    println("local.properties not found")
}

def runAsApp = ext.has('runAsApp')
runAsApp = ('true' == localProperties.getProperty(project.name))
apply plugin: 'com.android.application'

def hostPkg = "com.hubertyoung.acfunhost"
if (runAsApp) {
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
} else {
    apply plugin: 'com.wlqq.phantom.plugin'
}

println("<<<---- 插件信息 START ---->>>")
//模块名称
println(project.name + "--" + runAsApp)


android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId pluginApplicationId
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode pluginVersionCode
        versionName pluginVersionName

        signingConfigs {
            config {
                keyAlias localProperties['keyAlias']
                keyPassword localProperties['keyPassword']
                storeFile file(localProperties['storeFile'])
                storePassword localProperties['storePassword']
            }
        }
    }
    println("宿主 defaultConfig--" + defaultConfig)
    println("宿主 targetSdkVersion--" + defaultConfig.targetSdkVersion)

    buildTypes {
        def STRING = "String"
        def HOST_PKG = "HOST_PKG"
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField STRING, HOST_PKG, "\"$hostPkg\""

        }
        debug {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField STRING, HOST_PKG, "\"$hostPkg\""
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.applicationId}_${variant.versionName}.apk"
        }
    }
    sourceSets {
        main {
            //默认的作为application运行时Manifest文件路径
            def debugManifest = 'src/main/debug/AndroidManifest.xml'
            if (runAsApp && project.file(debugManifest).exists()) {
                manifest.srcFile debugManifest
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下自动排除debug文件夹中的所有Java文件
                // 可以将debug代码放在这个包内，例如：Application子类
                java {
                    exclude 'debug/**'
                }
            }
            // 注：2018-03-12推荐：将组件单独以app运行时的测试代码及资源放到src/main/debug/目录下
            if (runAsApp) {
                //debug模式下，如果存在src/main/debug/assets，则自动将其添加到assets源码目录
                if (project.file('src/main/debug/assets').exists()) {
                    assets.srcDirs = ['src/main/assets', 'src/main/debug/assets']
                }
                //debug模式下，如果存在src/main/debug/java，则自动将其添加到java源码目录
                if (project.file('src/main/debug/java').exists()) {
                    java.srcDirs = ['src/main/java', 'src/main/debug/java']
                }
                //debug模式下，如果存在src/main/debug/res，则自动将其添加到资源目录
                if (project.file('src/main/debug/res').exists()) {
                    res.srcDirs = ['src/main/res', 'src/main/debug/res']
                }
            }
        }
    }
}

def deletePluginInHost() {
    println "deletePluginInHost..."
//    def assetsDir = file(project(':component_host').getProjectDir().absolutePath + '/src/main/assets/plugins')
//    if (!assetsDir.exists()) {
//        assetsDir.mkdirs()
//    }
//    assetsDir.eachFile { file ->
//        println "list assets file: " + file.name
//        if (file.name.startsWith(android.defaultConfig.applicationId)) {
//            def ret = file.delete()
//            println "delete assets file: ${file.name}, result: ${ret}"
//        }
//    }

    def debugAssetsDir = file(project(':component_host').getProjectDir().absolutePath + '/src/main/debug/assets/plugins')
    if (!debugAssetsDir.exists()) {
        debugAssetsDir.mkdirs()
    }
    debugAssetsDir.eachFile { file ->
        println "list assets file: " + file.name
        if (file.name.startsWith(android.defaultConfig.applicationId)) {
            def ret = file.delete()
            println "delete assets file: ${file.name}, result: ${ret}"
        }
    }
}

def copyPluginToHost(String dir) {
    println "copy build plugin to app assets..."
//    copy {
//        from(buildDir.absolutePath + '/outputs/apk/' + dir) {
//            include('*.apk')
//        }
//        into(project(':component_host').getProjectDir().absolutePath + '/src/main/assets/plugins/')
//    }
    //暂时不进行拷贝到资源目录
//    copy {
//        from(buildDir.absolutePath + '/outputs/apk/' + dir) {
//            include('*.apk')
//        }
//        into(project(':component_host').getProjectDir().absolutePath + '/src/main/debug/assets/plugins/')
//    }
}

dependencies {
    compileOnly deps.phantomVersion.communicationLib
    compileOnly deps.phantomVersion.pluginLib
    debugImplementation deps.phantomVersion.communicationLib
    debugImplementation deps.phantomVersion.pluginLib

    implementation deps.support.v4
    implementation deps.support.app_compat
//    implementation deps.support.design
//    implementation deps.support.cardview
//    implementation deps.constraint_layout
//    implementation deps.rx_android
//    implementation deps.rxjava2
//    implementation deps.rxbinding
}
if (runAsApp == false) {
    afterEvaluate { project ->
        project.tasks.assembleDebug.doLast {
            deletePluginInHost()
            copyPluginToHost('debug')
        }

        project.tasks.assembleRelease.doLast {
            deletePluginInHost()
            copyPluginToHost('release')
        }
    }

    phantomPluginConfig {
        /*------------------------------ 剔除 support-v4 及其依赖的库 BEGIN ----------------------------*/
//        excludeLib support.v4
//        excludeLib support.app_compat
//        excludeLib support.design
//        excludeLib support.cardview
//        excludeLib constraint_layout
//        excludeLib rx_android
        excludeLib "com.android.support:animated-vector-drawable:${versions.support}"
        excludeLib "com.android.support:appcompat-v7:${versions.support}"
        excludeLib "com.android.support:support-vector-drawable:${versions.support}"

        excludeLib "com.android.support:support-v4:${versions.support}"
        excludeLib "com.android.support:support-core-ui:${versions.support}"
        excludeLib "com.android.support:support-appcompat-v7:${versions.support}"
        excludeLib "com.android.support:support-compat:${versions.support}"
        excludeLib "com.android.support:support-media-compat:${versions.support}"
        excludeLib "com.android.support:support-core-utils:${versions.support}"
        excludeLib "com.android.support:support-fragment:${versions.support}"
        excludeLib "com.android.support:support-annotations:${versions.support}"
        excludeLib "com.android.support:cursoradapter:${versions.support}"
        excludeLib "com.android.support:interpolator:${versions.support}"
        excludeLib "com.android.support:versionedparcelable:${versions.support}"
        excludeLib "com.android.support:documentfile:${versions.support}"
        excludeLib "com.android.support:customview:${versions.support}"
        excludeLib "com.android.support:slidingpanelayout:${versions.support}"
        excludeLib "com.android.support:swiperefreshlayout:${versions.support}"
        excludeLib "com.android.support:drawerlayout:${versions.support}"
        excludeLib "com.android.support:coordinatorlayout:${versions.support}"
        excludeLib "com.android.support:loader:${versions.support}"
        excludeLib "com.android.support:viewpager:${versions.support}"
        excludeLib "com.android.support:collections:${versions.support}"
        excludeLib "com.android.support:asynclayoutinflater:${versions.support}"
        excludeLib "com.android.support:print:${versions.support}"
        excludeLib "com.android.support:localbroadcastmanager:${versions.support}"

        excludeLib "android.arch.lifecycle:viewmodel:${versions.lifecycle}"
        excludeLib "android.arch.lifecycle:runtime:${versions.lifecycle}"
        excludeLib "android.arch.lifecycle:common:${versions.lifecycle}"
        excludeLib "android.arch.lifecycle:livedata:${versions.lifecycle}"
        excludeLib "android.arch.lifecycle:livedata-core:${versions.lifecycle}"
        excludeLib "android.arch.core:common:${versions.lifecycle}"

        /*------------------------------ 删除 support-v4 及其依赖的库  END  ----------------------------*/

        /*------------------------------ 混淆配置 BEGIN ------------------------------*/
        libraryJarsProguardFile file('proguard-phantom.pro')
        /*------------------------------ 混淆配置  END  ------------------------------*/

        /*------------------------------ 快速安装插件配置 BEGIN ------------------------*/
        // 宿主包名
        hostApplicationId = hostPkg
        // 宿主 launcher Activity full class name
        hostAppLauncherActivity = "com.hubertyoung.component_host.MainActivity"
//        /sdcard/Android/data/com.hubertyoung.acfunhost/cache/hubertyoung/phantom
        phoneStorageDir = "/sdcard/Android/data/$hostPkg/cache/hubertyoung/phantom"
        // 插件包名
        pluginApplicationId = android.defaultConfig.applicationId
        // 插件版本名
        pluginVersionName = android.defaultConfig.versionName

        println("宿主包名--" + hostApplicationId)
        println("宿主launcher Activity full class name--" + hostAppLauncherActivity)
        println("插件包名--" + pluginApplicationId)
        println("插件版本名--" + pluginVersionName)
        /*------------------------------ 快速安装插件配置  END  -------------------------*/
    }
}
println("<<<---- 插件信息 END ---->>>")